{"version":3,"sources":["../src/main.ts","../src/match.ts","../src/utils.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\nimport prompts from 'prompts';\nimport { execSync, spawn } from 'child_process';\nimport { createTempEnv, findAvailablePort } from './utils';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\n\n\nconst execAsync = promisify(exec);\n\nasync function promptCommand() {\n  const res = await prompts({\n    type: 'select',\n    name: 'command',\n    message: '¿Qué quieres hacer?',\n    choices: [\n      { title: 'Crear entorno desde repo (create)', value: 'create' },\n      { title: 'Clonar un repo tuyo (clone)', value: 'clone' },\n      { title: 'Abrir contenedor existente (open)', value: 'open' },\n      { title: 'Eliminar contenedor (delete)', value: 'delete' }\n    ]\n  });\n  return res.command;\n}\n\nasync function promptRepo() {\n  const res = await prompts({\n    type: 'text',\n    name: 'repo',\n    message: 'Introduce usuario/repo de GitHub:'\n  });\n  return res.repo;\n}\n\nasync function promptContainer(action = 'abrir') {\n  const containers = execSync('docker ps -a --format \"{{.Names}}\"').toString().split('\\n').filter(Boolean);\n  if (containers.length === 0) {\n    console.log('No hay contenedores disponibles.');\n    process.exit(0);\n  }\n  const res = await prompts({\n    type: 'select',\n    name: 'container',\n    message: `Selecciona un contenedor para ${action}:`,\n    choices: containers.map(name => ({ title: name, value: name }))\n  });\n  return res.container;\n}\n\n// ===== COMANDOS =====\n\nasync function openCommand(containerArg?: string) {\n  const container = containerArg || await promptContainer('abrir');\n  if (!container) return;\n  execSync(`docker start ${container}`, { stdio: 'inherit' });\n}\n\nasync function deleteCommand(containerArg?: string) {\n  const container = containerArg || await promptContainer('eliminar');\n  if (!container) return;\n  execSync(`docker rm -f ${container}`, { stdio: 'inherit' });\n\n  const tmpPath = path.join(process.cwd(), 'tmp', container);\n\n  console.log(`Borrando carpeta temporal: ${tmpPath}`);\n\n  try {\n    await fs.rm(tmpPath, { recursive: true, force: true });\n    console.log(`Carpeta temporal eliminada: ${tmpPath}`);\n  } catch (err) {\n    console.warn(`No se pudo borrar la carpeta temporal (${tmpPath}):`, err.message);\n  }\n}\n\nasync function runCommand(runtime: string) {\n  const { path, port } = await createTempEnv(runtime);\n\n  return new Promise<void>((resolve, reject) => {\n    const child = spawn('docker', ['compose', 'up', '-d'], { cwd: path, stdio: 'inherit' });\n\n    child.on('close', (code) => {\n      if (code === 0) {\n        console.log(`http://localhost:${port}`);\n        resolve();\n      } else {\n        reject(new Error(`docker compose exited with code ${code}`));\n      }\n    });\n\n    child.on('error', (err) => {\n      console.error('Error al ejecutar docker compose:', err);\n      reject(err);\n    });\n  });\n}\n\n// ===== YARGS INTEGRACIÓN =====\n\nyargs(hideBin(process.argv))\n  .scriptName('coder')\n  .command('run [runtime]', 'Lanza un runtime', (yargs) =>\n    yargs.positional('runtime', {\n      type: 'string',\n      describe: 'Ejemplo: node:18',\n    }), async argv => {\n    await runCommand(argv.runtime);\n  })\n  .command('open [container]', 'Abre un contenedor existente', (yargs) =>\n    yargs.positional('container', {\n      type: 'string',\n      describe: 'Container',\n    }), async argv => {\n    await openCommand(argv.container);\n  })\n  .command('delete [container]', 'Elimina un contenedor', (yargs) =>\n    yargs.positional('container', {\n      type: 'string',\n      describe: 'Container',\n    }), async argv => {\n    await deleteCommand(argv.container);\n  })\n  .demandCommand(1, 1, 'Debes especificar un comando (create, clone, open, delete)')\n  .help()\n  .argv;","import * as fs from 'fs';\nimport * as path from 'path';\n\ninterface RoutePattern {\n  pattern: RegExp;\n  variables: string[];\n  dockerfilePath: string;\n  template: string; // Ej: '[base]/[version]/[mode]'\n}\n\nfunction scanRoutes(baseDir: string, prefix: string = ''): RoutePattern[] {\n  const routes: RoutePattern[] = [];\n\n  function walk(currentPath: string, parts: string[]) {\n    const entries = fs.readdirSync(currentPath, { withFileTypes: true });\n    for (const entry of entries) {\n      if (entry.isDirectory()) {\n        walk(path.join(currentPath, entry.name), [...parts, entry.name]);\n      } else if (entry.isFile() && entry.name === 'Dockerfile') {\n        // Construir template y patrón\n        const template = parts.join('/');\n        const variables: string[] = [];\n        // Convertir [var] en captura regex\n        const patternStr = parts.map(part => {\n          const match = part.match(/^\\[(.+)\\]$/);\n          if (match) {\n            variables.push(match[1]);\n            return '([^/]+)';\n          }\n          return part.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // Escape\n        }).join('/');\n\n        const pattern = new RegExp(`^${patternStr}$`);\n        routes.push({\n          pattern,\n          variables,\n          dockerfilePath: path.join(currentPath, entry.name),\n          template\n        });\n      }\n    }\n  }\n\n  walk(baseDir, prefix ? [prefix] : []);\n  return routes;\n}\n\n// Matching:\nexport function matchRoute(input: string) {\n    const [route, queryString] = input.split('?');\n    const params = new URLSearchParams(queryString);\n    \n    const envRoutes = scanRoutes(path.join(process.cwd(), 'runtime'));\n    //const customRoutes = scanRoutes(path.join(process.cwd(), 'custom'));\n    const routes = [...envRoutes];\n  \n    for (const r of routes) {\n        const m = route.match(r.pattern);\n        if (m) {\n            const p: Record<string, string> = {};\n            r.variables.forEach((v, i) => {\n                p[v] = m[i + 1];\n            });\n            return {\n                ...r,\n                variables: p,\n                variableNames: r.variables,\n                params\n            };\n        }\n    }\n    return null;\n}\n\n//const input = 'node/18/alpine?ssh=true&package=yarn';\n//const input = 'my/node:18';\n\n//const [route, queryString] = input.split('?');\n//const params = new URLSearchParams(queryString);\n\n//console.log('Ruta:', route); // node/18/alpine\n//console.log('ssh:', params.get('ssh')); // 'true'\n//console.log('package:', params.get('package')); // 'yarn'\n\n\n// Ejemplo:\n//const input = 'node/18/alpine';\n//const match = matchRoute(input);\n//if (match) {\n//    console.log(match)\n  //console.log('Dockerfile:', match.dockerfilePath);\n  //console.log('Variables:', match.params);\n//} else {\n//  console.log('No match');\n//}\n\n\n","import { matchRoute } from \"./match\";\n\nconst fs = require('fs');\nconst path = require('path');\nconst {detect} = require('detect-port');\n\n// === Configuración de rutas ===\n//const BASE_DIR = path.resolve(__dirname);\nconst BASE_DIR = process.cwd();\n\nconst RUNTIME_DIR = path.join(BASE_DIR, 'runtime');\nconst SAMPLES_DIR = path.join(BASE_DIR, 'samples');\nconst TMP_DIR = path.join(BASE_DIR, 'tmp');\n\nfunction getRuntimeOptions() {\n    return fs.readdirSync(RUNTIME_DIR, { withFileTypes: true })\n      .filter(dirent => dirent.isDirectory())\n      .map(dirent => dirent.name);\n  }\n\nfunction copyDockerfileSync(src: string, dest: string) {\n    if (!fs.existsSync(dest)) fs.mkdirSync(dest, { recursive: true });\n    fs.copyFileSync(src, path.join(dest, 'Dockerfile'));\n    /*fs.readdirSync(src).forEach( (item: string ) => {\n      const srcPath = path.join(src, item);\n      const destPath = path.join(dest, item);\n      //if (fs.lstatSync(srcPath).isDirectory()) {\n      //  copyDirSync(srcPath, destPath);\n      //} else {\n      //fs.copyFileSync(srcPath, destPath);\n      //}\n    });\n    */\n  }\n  \n  // Crea la carpeta temporal y copia los archivos necesarios\n  export async function createTempEnv(runtime: string) {\n    const { variables, dockerfilePath } = matchRoute(runtime);\n    \n    if (!fs.existsSync(TMP_DIR)) fs.mkdirSync(TMP_DIR);\n  \n    const safeRuntime = runtime.replace(/[^a-zA-Z0-9-_]/g, '-');\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const tempFolder = `${safeRuntime}-${timestamp}`;\n    const containerName = tempFolder;\n    const tempPath = path.join(TMP_DIR, tempFolder);\n  \n    const port = await findAvailablePort(8080);\n\n    fs.mkdirSync(tempPath);\n  \n    // Copiar runtime\n    //const runtimeSrc = path.join(RUNTIME_DIR, dockerfilePath);\n    //copyDirSync(runtimeSrc, tempPath);\n    copyDockerfileSync(dockerfilePath, tempPath);\n  \n    // Copiar docker-compose.yml\n    const composeSrc = path.join(SAMPLES_DIR, 'docker-compose.yml');\n    const composeDest = path.join(tempPath, 'docker-compose.yml');\n    fs.copyFileSync(composeSrc, composeDest);\n  \n    // Crear .env\n    const env = Object.entries(variables).map(([k, v]) => `${k.toUpperCase()}=${v}` );\n    console.log(env);\n    const envContent = [\n      ...env,\n      `CODE_PORT=${port}`,\n      `CONTAINER_NAME=${containerName}`\n    ].join('\\n');\n    fs.writeFileSync(path.join(tempPath, '.env'), envContent);\n  \n    return {path: tempPath, port};\n  }\n\nexport async function findAvailablePort(startPort = 8080) {\n    const port = await detect(startPort);\n    if (port === startPort) {\n      console.log(`El puerto ${startPort} está libre`);\n    } else {\n      console.log(`El puerto ${startPort} está ocupado, el siguiente libre es ${port}`);\n    }\n    return port;\n}\n\n  "],"mappings":"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","names":["fs","path","fs","path","import_child_process","prompts","path","fs","yargs"]}