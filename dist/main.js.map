{"version":3,"sources":["../src/main.ts","../src/utils.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\nimport prompts from 'prompts';\nimport { execSync } from 'child_process';\n//import { Octokit } from '@octokit/rest';\nimport { createTempEnv, findAvailablePort } from './utils';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\n// Configuración de GitHub\n//const GITHUB_TOKEN = process.env.GITHUB_TOKEN;\n//const octokit = GITHUB_TOKEN ? new Octokit({ auth: GITHUB_TOKEN }) : null;\n\n// ===== FUNCIONES AUXILIARES =====\n\nasync function promptCommand() {\n  const res = await prompts({\n    type: 'select',\n    name: 'command',\n    message: '¿Qué quieres hacer?',\n    choices: [\n      { title: 'Crear entorno desde repo (create)', value: 'create' },\n      { title: 'Clonar un repo tuyo (clone)', value: 'clone' },\n      { title: 'Abrir contenedor existente (open)', value: 'open' },\n      { title: 'Eliminar contenedor (delete)', value: 'delete' }\n    ]\n  });\n  return res.command;\n}\n\nasync function promptRepo() {\n  const res = await prompts({\n    type: 'text',\n    name: 'repo',\n    message: 'Introduce usuario/repo de GitHub:'\n  });\n  return res.repo;\n}\n\nasync function fetchUserRepos() {\n  if (!octokit) throw new Error('GITHUB_TOKEN no definido');\n  const repos = await octokit.paginate(octokit.repos.listForAuthenticatedUser, { per_page: 100 });\n  return repos.map(repo => ({\n    title: repo.full_name + (repo.private ? ' (privado)' : ''),\n    value: repo.ssh_url\n  }));\n}\n\nasync function promptUserRepo(): Promise<string> {\n  const repos = await fetchUserRepos();\n  const res = await prompts({\n    type: 'autocomplete',\n    name: 'repo',\n    message: 'Selecciona un repo:',\n    choices: repos\n  });\n  return res.repo;\n}\n\nasync function promptContainer(action = 'abrir') {\n  const containers = execSync('docker ps -a --format \"{{.Names}}\"').toString().split('\\n').filter(Boolean);\n  if (containers.length === 0) {\n    console.log('No hay contenedores disponibles.');\n    process.exit(0);\n  }\n  const res = await prompts({\n    type: 'select',\n    name: 'container',\n    message: `Selecciona un contenedor para ${action}:`,\n    choices: containers.map(name => ({ title: name, value: name }))\n  });\n  return res.container;\n}\n\n// ===== COMANDOS =====\n\nasync function createCommand(repoArg?: string) {\n  const repo = repoArg || await promptRepo();\n  if (!repo) return;\n  execSync(`npx degit ${repo}`, { stdio: 'inherit' });\n}\n\nasync function cloneCommand() {\n  const repo = await promptUserRepo();\n  if (!repo) return;\n  execSync(`git clone ${repo}`, { stdio: 'inherit' });\n}\n\nasync function openCommand(containerArg?: string) {\n  const container = containerArg || await promptContainer('abrir');\n  if (!container) return;\n  execSync(`docker start ${container}`, { stdio: 'inherit' });\n}\n\nasync function deleteCommand(containerArg?: string) {\n  const container = containerArg || await promptContainer('eliminar');\n  if (!container) return;\n  execSync(`docker rm -f ${container}`, { stdio: 'inherit' });\n}\n\nasync function runCommand(runtime: string) {\n  \n  const {path, port} = await createTempEnv(runtime);\n  try {\n    // Ejecuta docker compose up -d en el directorio temporal\n    const { stdout, stderr } = await execAsync('docker compose up -d', { cwd: path });\n    if (stdout) console.log(stdout);\n    if (stderr) console.error(stderr);\n    console.log(`http://localhost:${port}`);\n  } catch (error) {\n    console.error('Error al ejecutar docker compose:', error);\n    throw error;\n  }\n}\n\n\n// ===== YARGS INTEGRACIÓN =====\n\nyargs(hideBin(process.argv))\n  .scriptName('coder')\n  .command('run [runtime]', 'Lanza un runtime', (yargs) =>\n    yargs.positional('runtime', {\n      type: 'string',\n      describe: 'Ejemplo: node:18',\n    }), async argv => {\n    await runCommand(argv.runtime);\n  })\n  .command('create [repo]', 'Crea entorno desde repo', (yargs) =>\n    yargs.positional('repo', {\n      type: 'string',\n      describe: 'Usuario/repo de GitHub',\n    }), async argv => {\n    await createCommand(argv.repo);\n  })\n  .command('clone', 'Clona un repo tuyo', {}, async () => {\n    await cloneCommand();\n  })\n  .command('open [container]', 'Abre un contenedor existente', (yargs) =>\n    yargs.positional('container', {\n      type: 'string',\n      describe: 'Container',\n    }), async argv => {\n    await openCommand(argv.container);\n  })\n  .command('delete [container]', 'Elimina un contenedor', (yargs) =>\n    yargs.positional('container', {\n      type: 'string',\n      describe: 'Container',\n    }), async argv => {\n    await deleteCommand(argv.container);\n  })\n  .demandCommand(1, 1, 'Debes especificar un comando (create, clone, open, delete)')\n  .help()\n  .argv;","const fs = require('fs');\nconst path = require('path');\nconst {detect} = require('detect-port');\n\n// === Configuración de rutas ===\n//const BASE_DIR = path.resolve(__dirname);\nconst BASE_DIR = process.cwd();\n\nconst RUNTIME_DIR = path.join(BASE_DIR, 'runtime');\nconst SAMPLES_DIR = path.join(BASE_DIR, 'samples');\nconst TMP_DIR = path.join(BASE_DIR, 'tmp');\n\nfunction getRuntimeOptions() {\n    return fs.readdirSync(RUNTIME_DIR, { withFileTypes: true })\n      .filter(dirent => dirent.isDirectory())\n      .map(dirent => dirent.name);\n  }\n\nfunction copyDirSync(src: string, dest: string) {\n    if (!fs.existsSync(dest)) fs.mkdirSync(dest, { recursive: true });\n    fs.readdirSync(src).forEach( (item: string ) => {\n      const srcPath = path.join(src, item);\n      const destPath = path.join(dest, item);\n      if (fs.lstatSync(srcPath).isDirectory()) {\n        copyDirSync(srcPath, destPath);\n      } else {\n        fs.copyFileSync(srcPath, destPath);\n      }\n    });\n  }\n  \n  // Crea la carpeta temporal y copia los archivos necesarios\n  export async function createTempEnv(runtime: string /*, repo: string, branch: string*/) {\n    if (!fs.existsSync(TMP_DIR)) fs.mkdirSync(TMP_DIR);\n  \n    const safeRuntime = runtime.replace(/[^a-zA-Z0-9-_]/g, '-');\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const tempFolder = `${safeRuntime}-${timestamp}`;\n    const tempPath = path.join(TMP_DIR, tempFolder);\n  \n    const port = await findAvailablePort(8080);\n\n    fs.mkdirSync(tempPath);\n  \n    // Copiar runtime\n    const runtimeSrc = path.join(RUNTIME_DIR, runtime);\n    copyDirSync(runtimeSrc, tempPath);\n  \n    // Copiar docker-compose.yml\n    const composeSrc = path.join(SAMPLES_DIR, 'docker-compose.yml');\n    const composeDest = path.join(tempPath, 'docker-compose.yml');\n    fs.copyFileSync(composeSrc, composeDest);\n  \n    // Crear .env\n    const envContent = [\n      //`GIT_REPO=${repo.ssh_url}`,\n      //`GIT_BRANCH=${branch}`\n      `CODE_PORT=${port}`\n    ].join('\\n');\n    fs.writeFileSync(path.join(tempPath, '.env'), envContent);\n  \n    return {path: tempPath, port};\n  }\n\nexport async function findAvailablePort(startPort = 8080) {\n    const port = await detect(startPort);\n    if (port === startPort) {\n      console.log(`El puerto ${startPort} está libre`);\n    } else {\n      console.log(`El puerto ${startPort} está ocupado, el siguiente libre es ${port}`);\n    }\n    return port;\n}\n\n  "],"mappings":"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","names":["import_child_process","prompts","path","yargs"]}